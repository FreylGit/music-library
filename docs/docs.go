// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/songs": {
            "get": {
                "description": "Позволяет получить список песен с учетом фильтров и пагинации",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Получает список песен с фильтрацией",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Номер страницы для пагинации (начиная с 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Название группы для фильтрации",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Название песни для фильтрации",
                        "name": "song",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Дата релиза песни в формате DD.MM.YYYY",
                        "name": "releaseDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список песен",
                        "schema": {
                            "$ref": "#/definitions/songs.response_songs"
                        }
                    },
                    "400": {
                        "description": "error: Invalid param id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error: Internal server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Позволяет добавить песню в библиотеку, принимая название группы и песни",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Добавление новой песни",
                "parameters": [
                    {
                        "description": "Данные для добавления песни",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/songs.request_add"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Invalid body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error: Internal server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/songs/{id}": {
            "get": {
                "description": "Позволяет получить песню по id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Получает песню",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id песни",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Номер куплета для пагинации",
                        "name": "kuplet",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Детали песни",
                        "schema": {
                            "$ref": "#/definitions/songs.response_get"
                        }
                    },
                    "400": {
                        "description": "error: Invalid param id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error: Internal server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Позволяет обновить информацию о песне по ID. Все поля необязательные, обновляются только переданные значения.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Обновляет информацию о песне",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID песни",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Информация для обновления песни",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/songs.request_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Invalid body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error: Internal server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Позволяет удалить песню из библиотеки по её ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Удаление песни по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID песни, которую нужно удалить",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Invalid param id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error: Internal server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "songs.customTime": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        },
        "songs.request_add": {
            "description": "Структура данных для добавления песни",
            "type": "object",
            "properties": {
                "group": {
                    "description": "Группа, обязательное поле",
                    "type": "string"
                },
                "song": {
                    "description": "Песня, обязательное поле",
                    "type": "string"
                }
            }
        },
        "songs.request_update": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "release_date": {
                    "$ref": "#/definitions/songs.customTime"
                },
                "song": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "songs.response_get": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "link": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "song": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "songs.response_songs": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/songs.response_get"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
